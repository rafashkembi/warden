#!/usr/bin/env bash
set -e
trap '>&2 printf "\n\e[01;31mERROR\033[0m: Command \`%s\` on line $LINENO failed with exit code $?\n" "$BASH_COMMAND"' ERR

## find directory where this script is located following symlinks if neccessary
readonly WARDEN_DIR="$(
  cd "$(
    dirname "$(
      (readlink "${BASH_SOURCE[0]}" || echo "${BASH_SOURCE[0]}") \
        | sed -e "s#^../#$(dirname "$(dirname "${BASH_SOURCE[0]}")")/#"
    )"
  )/.." >/dev/null \
  && pwd
)"

## function for determining if a value is present in an array
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

## define environment requirements
readonly WARDEN_REQUIRED_DOCKER_COMPOSE="1.18.0"

## define global directory paths by commands
readonly WARDEN_HOME_DIR=~/.warden
readonly WARDEN_SSL_DIR="${WARDEN_HOME_DIR}/ssl"

## declare variables for flags and arguments
declare WARDEN_HELP=
declare WARDEN_PARAMS=()
declare WARDEN_COMMAND=
declare WARDEN_ANYARGS=(env db shell)
declare WARDEN_VERBOSE=

## parse first argument as command and determine validity
if (( "$#" )) && [[ -f "${WARDEN_DIR}/commands/${1}.cmd" ]]; then
  WARDEN_COMMAND="$1"
  shift
elif (( "$#" )) && [[ -f "${WARDEN_DIR}/custom_commands/${1}.cmd" ]]; then
  WARDEN_COMMAND="$1"
  shift
else
  WARDEN_COMMAND=usage
fi

## parse arguments
while (( "$#" )); do
  case "$1" in
    -h|--help)
      WARDEN_HELP=1
      break
      ;;
    -v|--verbose)
      WARDEN_VERBOSE=1
      break
      ;;
    --) # end argument parsing (unless command is on 'anyargs' list and consumes anything as params)
      shift
      containsElement "${WARDEN_COMMAND}" "${WARDEN_ANYARGS[@]}" || break
      ;;
    -*|--*=) # unsupported flags (unless command is on 'anyargs' list and consumes anything as params)
      containsElement "${WARDEN_COMMAND}" "${WARDEN_ANYARGS[@]}" && break
      >&2 printf "\e[01;31mERROR\033[0m: Unsupported flag $1\n"
      exit 1
      ;;
    *) # preserve positional arguments
      WARDEN_PARAMS+=($1)
      shift
      ;;
  esac
done

## display command specific usage info if help flag is set
if [[ ${WARDEN_HELP} ]]; then
  source "${WARDEN_DIR}/commands/usage.cmd"
fi

## execute sub-command in context of this script
if [[ -f "${WARDEN_DIR}/custom_commands/${WARDEN_COMMAND}.cmd" ]]; then
  source "${WARDEN_DIR}/custom_commands/${WARDEN_COMMAND}.cmd"
else
  source "${WARDEN_DIR}/commands/${WARDEN_COMMAND}.cmd"
fi
